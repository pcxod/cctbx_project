# Script for building CCTBX
# Windows image description
# https://github.com/Microsoft/azure-pipelines-image-generation/blob/master/images/win/Vs2017-Server2016-Readme.md

jobs:
- job: win_64
  pool:
    vmImage: vs2017-win2016
  timeoutInMinutes: 120
  strategy:
    maxParallel: 1
    matrix:
      python2.7:
        OS: win-64
        PYTHON_VERSION: py27

  steps:
  - script: |
      choco install vcpython27 -fdv -y --debug
    displayName: Install vcpython27.msi

  - powershell: |
      Set-PSDebug -Trace 1

      $batchcontent = @"
      ECHO ON
      SET vcpython=C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0

      DIR "%vcpython%"

      CALL "%vcpython%\vcvarsall.bat" %*
      "@

      $batchDir = "C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0\VC"
      $batchPath = "$batchDir" + "\vcvarsall.bat"
      New-Item -Path $batchPath -ItemType "file" -Force

      Set-Content -Value $batchcontent -Path $batchPath

      Get-ChildItem -Path $batchDir

      Get-ChildItem -Path ($batchDir + '\..')

    displayName: Patch vs2008

  # download components
  - checkout: none

  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'current'
      artifact: modules
      path: $(Pipeline.Workspace)
    displayName: Download modules tarball

  - script: |
      cd $(Pipeline.Workspace)
      tar -xf modules.tar
    displayName: Extract modules tarball

  - script: |
      cd $(Pipeline.Workspace)\modules\dxtbx
      git remote set-url origin https://github.com/dials/dxtbx.git
      git fetch origin
      git reset --hard origin/dials-2.2
    displayName: Use dials-2.2 branch for Python 2
    condition: eq(variables['PYTHON_VERSION'], 'py27')

  - script: |
      cd $(Pipeline.Workspace)
      copy modules\cctbx_project\libtbx\auto_build\bootstrap.py .
    displayName: Copy bootstrap.py

  # install base
  - script: |
      cd $(Pipeline.Workspace)
      python bootstrap.py base --builder=cctbx --nproc=4
    displayName: Install base dependencies

  # build
  - script: |
      cd $(Pipeline.Workspace)
      call "C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0\vcvarsall.bat" amd64
      python bootstrap.py build --builder=cctbx --nproc=4
      call .\build\setpaths.bat
      call libtbx.configure cma_es fable rstbx spotfinder cbflib_adaptbx phenix_examples phenix_regression
      cd build
      call libtbx.scons -j 4
      call libtbx.scons -j 4
    displayName: Configure and Build

  # test
  - script: |
      cd $(Pipeline.Workspace)
      call "C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0\vcvarsall.bat" amd64
      call .\build\setpaths.bat
      mkdir tests
      cd tests
      call libtbx.run_tests_parallel module=boost_adaptbx module=cctbx module=cma_es module=fable module=gltbx module=iotbx module=libtbx module=rstbx module=scitbx module=smtbx module=spotfinder module=annlib_adaptbx module=cbflib_adaptbx nproc=4
    failOnStderr: false
    displayName: Test

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(Pipeline.Workspace)\tests\output.xml'
